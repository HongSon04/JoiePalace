generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id             Int          @id @default(autoincrement())
  username       String?
  email          String       @unique
  password       String
  platform       String?
  phone          String?
  avatar         String?
  role           String       @default("user")
  active         Boolean      @default(true)
  refresh_token  String?
  verify_at      DateTime?
  deleted        Boolean      @default(false)
  deleted_at     DateTime?
  deleted_by     Int?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  memberships_id Int?         @unique
  memberships    memberships? @relation(fields: [memberships_id], references: [id])
  bookings       bookings[]
}

model memberships {
  id                  Int       @id @default(autoincrement())
  name                String
  decsription         String
  booking_total       Int
  booking_totalAmount Int
  gifts               Json[]
  images              String[]
  deleted             Boolean   @default(false)
  deleted_at          DateTime?
  deleted_by          Int?
  created_at          DateTime  @default(now())
  updated_at          DateTime  @updatedAt
  users               users[]
}

model verify_tokens {
  id         Int       @id @default(autoincrement())
  email      String
  token      String
  expired_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model locations {
  id              Int                @id @default(autoincrement())
  name            String
  slug            String             @unique
  address         String
  phone           String
  email           String
  rate            Int                @default(5)
  images          String[]
  deleted         Boolean            @default(false)
  deleted_at      DateTime?
  deleted_by      Int?
  created_at      DateTime           @default(now())
  updated_at      DateTime           @updatedAt
  staffs          staffs[]
  location_detail location_details[]
  stages          stages[]
  spaces          spaces[]
  bookings        bookings[]
}

model location_details {
  id                    Int       @id @default(autoincrement())
  location              locations @relation(fields: [location_id], references: [id])
  location_id           Int       @unique
  slogan                String
  slogan_description    String
  slogan_images         String[]
  diagram_description   String
  diagram_images        String[]
  equipment_description String
  equipment_images      String[]
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
}

model stages {
  id          Int        @id @default(autoincrement())
  location    locations  @relation(fields: [location_id], references: [id])
  location_id Int        @unique
  name        String
  description String
  images      String[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  bookings    bookings[]
}

model spaces {
  id          Int        @id @default(autoincrement())
  location    locations  @relation(fields: [location_id], references: [id])
  location_id Int        @unique
  name        String
  slug        String     @unique
  description String
  images      String[]
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  bookings    bookings[]
}

model staffs {
  id           Int       @id @default(autoincrement())
  locations    locations @relation(fields: [locations_id], references: [id])
  locations_id Int       @unique
  name         String
  phone        String
  avatar       String?
  payment_info String
  shift        String
  deleted      Boolean   @default(false)
  deleted_at   DateTime?
  deleted_by   Int?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
}

model categories {
  id                Int       @id @default(autoincrement())
  name              String
  slug              String    @unique
  description       String
  short_description String?
  deleted           Boolean   @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  foods             foods[]
}

model tags {
  id         Int      @id @default(autoincrement())
  name       String
  slug       String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  foods      foods[]  @relation("FoodTags")
}

model foods {
  id                Int        @id @default(autoincrement())
  category_id       Int
  categories        categories @relation(fields: [category_id], references: [id])
  name              String
  slug              String     @unique
  description       String
  short_description String?
  price             Int
  images            String[]
  tags              tags[]     @relation("FoodTags")
  menus             menus[]    @relation("FoodMenus") // Many-to-Many relationship
  deleted           Boolean    @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
}

model menus {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String    @unique
  description String
  price       Int
  foods       foods[]   @relation("FoodMenus")
  is_show     Boolean   @default(true)
  deleted     Boolean   @default(false)
  deleted_at  DateTime?
  deleted_by  Int?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
}

model decors {
  id                Int       @id @default(autoincrement())
  name              String
  slug              String    @unique
  description       String
  short_description String?
  images            String[]
  price             Int
  deleted           Boolean   @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model party_types {
  id                Int       @id @default(autoincrement())
  name              String
  slug              String    @unique
  description       String
  short_description String?
  images            String[]
  deleted           Boolean   @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model funitures {
  id                Int       @id @default(autoincrement())
  name              String
  slug              String    @unique
  description       String
  short_description String?
  images            String[]
  price             Int
  type              String
  deleted           Boolean   @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}

model deposits {
  id             Int        @id @default(autoincrement())
  transactionID  Int
  name           String
  phone          String?
  email          String
  amount         Int
  payment_method String
  status         String     @default("pending")
  deleted        Boolean    @default(false)
  deleted_at     DateTime?
  deleted_by     Int?
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  bookings       bookings[]
}

model bookings {
  id                Int       @id @default(autoincrement())
  user_id           Int
  users             users     @relation(fields: [user_id], references: [id])
  location_id       Int
  locations         locations @relation(fields: [location_id], references: [id])
  space_id          Int
  spaces            spaces    @relation(fields: [space_id], references: [id])
  stage_id          Int
  stages            stages    @relation(fields: [stage_id], references: [id])
  deposit_id        Int
  deposits          deposits  @relation(fields: [deposit_id], references: [id])
  name              String
  images            String[]
  accessories       Json[]
  shift             String
  organization_date DateTime
  amount            Int
  fee               Int
  total_amount      Int
  status            String    @default("pending")
  deleted           Boolean   @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
}
