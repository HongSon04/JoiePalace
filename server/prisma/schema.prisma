generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ? Tạo Role cho User
enum Role {
  user
  admin
  manager
}

// ? Tạo PaymentMethod cho Deposit
enum PaymentMethod {
  cash
  momo
  zalo
  vnpay
  onepay
  bank
}

// ? Tạo status cho Booking
enum BookingStatus {
  pending
  cancel
  success
  processing
}

// ? Tạo status cho Deposit
enum DepositStatus {
  pending
  cancel
  success
}

model users {
  id             Int          @id @default(autoincrement())
  branch_id      Int?
  branches       branches?    @relation(fields: [branch_id], references: [id])
  username       String?
  email          String       @unique
  password       String
  platform       String?
  phone          String?
  avatar         String?
  role           Role         @default(user)
  active         Boolean      @default(true)
  refresh_token  String?
  verify_at      DateTime?
  deleted        Boolean      @default(false)
  deleted_at     DateTime?
  deleted_by     Int?
  created_at     DateTime     @default(now())
  updated_at     DateTime     @updatedAt
  memberships_id Int?         @unique
  memberships    memberships? @relation(fields: [memberships_id], references: [id])
  bookings       bookings[]
  feedbacks      feedbacks[]
}

model memberships {
  id                   Int        @id @default(autoincrement())
  name                 String
  slug                 String     @unique
  description          String
  booking_total_amount Int
  gifts                products[] @relation("MembershipGifts")
  images               String[]
  deleted              Boolean    @default(false)
  deleted_at           DateTime?
  deleted_by           Int?
  created_at           DateTime   @default(now())
  updated_at           DateTime   @updatedAt
  users                users[]
}

model verify_tokens {
  id         Int       @id @default(autoincrement())
  email      String
  token      String
  expired_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model branches {
  id                    Int         @id @default(autoincrement())
  name                  String
  slug                  String      @unique
  address               String
  phone                 String
  email                 String
  rate                  Float       @default(5)
  images                String[]
  slogan                String
  slogan_description    String
  slogan_images         String[]
  diagram_description   String
  diagram_images        String[]
  equipment_description String
  equipment_images      String[]
  deleted               Boolean     @default(false)
  deleted_at            DateTime?
  deleted_by            Int?
  created_at            DateTime    @default(now())
  updated_at            DateTime    @updatedAt
  stages                stages[]
  bookings              bookings[]
  feedbacks             feedbacks[]
  users                 users[]
}

model stages {
  id           Int        @id @default(autoincrement())
  branch       branches   @relation(fields: [branch_id], references: [id])
  branch_id    Int        @unique
  name         String
  description  String
  images       String[]
  capacity_min Int        @default(0)
  capacity_max Int        @default(0)
  price        Int        @default(0)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  bookings     bookings[]
}

model categories {
  id                Int        @id @default(autoincrement())
  category_id       Int?
  name              String
  slug              String     @unique
  description       String
  short_description String?
  images            String[]
  deleted           Boolean    @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_by        Int?
  updated_by        Int?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  products          products[]
  tags              tags[]     @relation("CategoryTags")
  blogs             blogs[]
}

model tags {
  id         Int          @id @default(autoincrement())
  name       String
  slug       String       @unique
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  products   products[]   @relation("ProductTags")
  blogs      blogs[]      @relation("BlogTags")
  categories categories[] @relation("CategoryTags")
}

model products {
  id                Int           @id @default(autoincrement())
  category_id       Int
  categories        categories    @relation(fields: [category_id], references: [id])
  name              String
  slug              String        @unique
  description       String
  short_description String?
  price             Int
  images            String[]
  tags              tags[]        @relation("ProductTags")
  menus             menus[]       @relation("ProductMenus")
  memberships       memberships[] @relation("MembershipGifts")
  decors            decors[]      @relation("DecorProducts")
  party_types       party_types[] @relation("PartyTypeProducts")
  deleted           Boolean       @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
}

model menus {
  id              Int               @id @default(autoincrement())
  name            String
  slug            String            @unique
  description     String
  price           Int
  is_show         Boolean           @default(false)
  products        products[]        @relation("ProductMenus")
  deleted         Boolean           @default(false)
  deleted_at      DateTime?
  deleted_by      Int?
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  booking_details booking_details[]
}

model decors {
  id                Int               @id @default(autoincrement())
  name              String
  description       String
  short_description String?
  images            String[]
  price             Int
  is_show           Boolean           @default(false)
  products          products[]        @relation("DecorProducts")
  booking_details   booking_details[]
  deleted           Boolean           @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}

model party_types {
  id                Int        @id @default(autoincrement())
  name              String
  description       String
  short_description String?
  images            String[]
  price             Int
  is_show           Boolean    @default(false)
  products          products[] @relation("PartyTypeProducts")
  deleted           Boolean    @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  bookings          bookings[]
}

model deposits {
  id              Int               @id @default(autoincrement())
  transactionID   String            @unique
  name            String?
  phone           String?
  email           String?
  amount          Int
  status          DepositStatus     @default(pending)
  payment_method  PaymentMethod?
  booking_details booking_details[]
  expired_at      DateTime          @default(dbgenerated("now() + interval '3 day'"))
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
}

model bookings {
  id                Int               @id @default(autoincrement())
  user_id           Int?
  users             users?            @relation(fields: [user_id], references: [id])
  branch_id         Int
  branches          branches          @relation(fields: [branch_id], references: [id])
  stage_id          Int?
  stages            stages?           @relation(fields: [stage_id], references: [id])
  party_type_id     Int
  party_types       party_types       @relation(fields: [party_type_id], references: [id])
  name              String
  phone             String
  email             String
  company_name      String?
  note              String?
  shift             String
  number_of_guests  Int?
  organization_date DateTime
  is_confirm        Boolean           @default(false)
  is_deposit        Boolean           @default(false)
  status            BookingStatus     @default(pending)
  expired_at        DateTime          @default(dbgenerated("now() + interval '3 day'"))
  deleted           Boolean           @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
  booking_details   booking_details[]
  feedbacks         feedbacks[]
}

model booking_details {
  id             Int      @id @default(autoincrement())
  booking_id     Int      @unique
  bookings       bookings @relation(fields: [booking_id], references: [id])
  decor_id       Int
  decors         decors   @relation(fields: [decor_id], references: [id])
  menu_id        Int
  menus          menus    @relation(fields: [menu_id], references: [id])
  deposit_id     Int
  deposits       deposits @relation(fields: [deposit_id], references: [id])
  party_types    Json?
  decor          Json?
  menu           Json?
  extra_service  Json?
  gift           Json?
  images         String[]
  amount_booking Int      @default(0)
  fee            Int      @default(0)
  total_amount   Int      @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
}

model feedbacks {
  id         Int      @id @default(autoincrement())
  branch_id  Int
  branches   branches @relation(fields: [branch_id], references: [id])
  booking_id Int
  bookings   bookings @relation(fields: [booking_id], references: [id])
  user_id    Int?
  users      users?   @relation(fields: [user_id], references: [id])
  name       String
  comments   String
  rate       Float    @default(5)
  is_show    Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model blogs {
  id                Int        @id @default(autoincrement())
  category_id       Int
  categories        categories @relation(fields: [category_id], references: [id])
  title             String
  slug              String     @unique
  description       String
  short_description String?
  content           String
  tags              tags[]     @relation("BlogTags")
  images            String[]
  views             Int        @default(0)
  deleted           Boolean    @default(false)
  deleted_at        DateTime?
  deleted_by        Int?
  created_by        Int?
  updated_by        Int?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
}
